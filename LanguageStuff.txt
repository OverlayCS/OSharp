==========================
   MyLanguage Reference
==========================

FUNCTIONS
---------
Function prefix is the return type (or 'void' if it returns nothing).

Examples:

    <visibility> void FunctionName(name: type, age: type)
    {
        Console.Message(name + age);
    }

    int FunctionName(age: type)
    {
        Console.Message(age.ToUsableString());
        return age++;
    }


VARIABLES
---------
Declare variables with or without default values.

    <visibility> <type> VariableName;
        // Default initialized to type's empty value (0 for numbers, "" for strings)

    <visibility> <type> VariableName = <default value>;
        // Explicit default value

ONCHANGE VARIABLES
------------------
Attach automatic behavior when variable value changes.

    <visibility> <type> VariableName : OnChanged
    {
        // Code runs whenever variable changes
    }

    <visibility> <type> VariableName = <default value>, : OnChanged
    {
        // Code runs whenever variable changes
    }

    <visibility> <type> VariableName = <default value>, : OnChanged when (newVal <operator> <value>)
    {
        // Code runs only when condition is true
    }

EVENT SUBSCRIPTIONS
-------------------
    <variable>.OnChanged += OnChangedFunction
    <variable>.OnChanged -= OnChangedFunction


FUNCTION VISIBILITY
-------------------
    public    // Can be accessed from any class with an object reference
    private   // Accessible only within the defining class
    static    // Belongs to the class itself, no object needed
    internal  // Accessible only to other internal classes


THREADS
-------
Thread Types:
    safe   // Can only access safe, managed memory
    unsafe // Can access any memory used by the program (dangerous)
    io     // For file I/O operations
    net    // For networking operations
    all    // Combines all thread types (not recommended unless necessary)

Up to two thread types may be specified.

Example:

    // Creating a thread
    <visibility> <threadType1> <threadType2> parallel myThread = new();

    // Starting thread
    myThread.Start()
    {
        // Code executed on this thread
    };

    // Subscribing to thread events
    myThread.OnStarted()   += OnStartedFunction;
    myThread.OnEnded()     += OnEndedFunction;
    myThread.OnDestroyed() += OnDestroyedFunction;

    // Sending data back to main thread
    myThread.SendMain(data);

    // Pausing the thread
    myThread.End();

    // Destroying the thread (must recreate to reuse)
    myThread.Destroy();


PREBUILT FUNCTIONS
------------------

Console:
    Console.Message(message);                 // Prints a message to console
    Console.ReadConsoleInput();               // Returns last user input as string
    Console.OpenFile(filePath);               // Opens file and returns file object
    Console.CloseFile(closeAllFiles: bool);   // Closes last opened file (or all if true)

Type Functions:
    <int/float/...>.ToUsableString();         // Converts number to usable string
    <string/char>.ToUsableNum();              // Converts string/char to number
    <list/array>.GetIndexOf(object);          // Finds index of first matching object
    <list/array>.AddElement(object);          // Adds object to end of list/array
    <list/array>.RemoveElement(object, RemoveAllInstances: bool);
                                              // Removes first or all matching objects

File Functions:
    <OpenedFile>.Write(data);                 // Writes data to file
    <OpenedFile>.Read();                      // Reads file as string
    <OpenedFile>.Delete();                    // Deletes file safely
    <OpenedFile>.ChangePath(newPath);         // Moves file to new location
    <OpenedFile>.Tell();                      // Returns file path
    <OpenedFile>.IsActive();                  // True if file is currently in use
    <OpenedFile>.ReadLines();                 // Reads file as list of strings
    <OpenedFile>.WriteLines(List<string>);    // Writes list of strings to file
    <OpenedFile>.IsWritable();                // True if file is writable

Networking Functions:
    NetworkServer.SetNetworkType(type);       // Sets network type (UDP/TCP/KCP)
    NetworkServer.Start(port: int);           // Starts server on given port
    NetworkServer.Listen();                   // Listens for incoming data
    NetworkServer.Send(ip: string, broadcast: bool);
                                              // Sends data, broadcasts if true
    NetworkConnector.Connect(ip: string, port: int);
                                              // Connects to server (error if none)
    NetworkConnector.Receive();               // Receives data as byte array
    NetworkUtils.DecodeMessage(data);         // Decodes UTF-8 data to string
    NetworkUtils.EncodeMessage(message);      // Encodes string to byte array
    NetworkServer.DisconnectClient(client);   // Disconnects specified client
    NetworkServer.Shutdown();                 // Stops server & kicks all clients


CORE CODE BLOCKS
----------------

Loops:
    for (int index in <list/array>)
    {
        // Code using index
    }

    foreach (<type> item in <list/array>)
    {
        // Code using each element
    }

Conditionals:
    if (object <operator> object)
    {
        // Runs if true
    }
    else
    {
        // Runs if false
    }

Try / Exception Handling:
    try
    {
        // Code that might throw error
    }
    error(exception e)
    {
        Console.Message(e.Message);
    }
    final
    {
        // Always runs after try or error
    }

While Loops:
    while (condition)
    {
        // Runs until condition false or loop broken
    }

Breaking Loops:
    for (int index in <list/array>)
    {
        if (index == 5) continue; // Skip iteration
        if (index == 8) end;      // Exit loop
    }


OPERATORS
---------
    +   // Addition
    -   // Subtraction
    *   // Multiplication
    /   // Division (float/double)
//  // Integer division
    ++  // Increment by 1
    --  // Decrement by 1
